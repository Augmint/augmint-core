@startuml
title **Augmint** - Loan flow
skinparam ArrowColor #blue
skinparam noteBackgroundColor #lightgrey
actor Borrower
control AugmintToken
control LoanManager
actor Anyone
== new loan ==
Borrower -> LoanManager : getLoan\n(productId, {ethToEscrow})
LoanManager -> LoanManager : calculate loanAmount from collateral, interest etc
LoanManager -> AugmintToken : issueAndDisburse\n(borrower, loanAmount, interestAmount)
note over AugmintToken
issueAndDisburse is restricted to trusted LoanManager(s)
end note
AugmintToken -> AugmintToken : issue(repaymentAmount)\nbalances[interestPool] += interestAmount
AugmintToken -> AugmintToken : _transfer\n(borrower, loanAmount, "loan disbursment", 0)
AugmintToken --> Borrower : loanAmount transferred

== repay loan Alt 1. (with a single TX from user)  ==
Borrower -> AugmintToken : repayLoan(loanManager, loanId)
note over AugmintToken
    Only accepts whitelisted loanManagerAddress
    to avoid phising attacks
end note
AugmintToken -> AugmintToken : approve\n(loanManager, repaymentAmount)

AugmintToken -> LoanManager : releaseCollateral(loanId)
note left LoanManager
    releaseCollateral() is not restricted but
    it checks loan status and transfers repaymentAmount from user
end note
LoanManager -> AugmintToken : repayAndBurn(borrower, repaymentAmount, interestAmount, narrative)
note right AugmintToken
    RepayAndBurn() is restricted to trusted loanManagers
end note
activate AugmintToken
AugmintToken -> AugmintToken : transferFromNoFee\n(from: borrower, to: loanManager, , "loan repayment", fee: 0)
Borrower --> LoanManager : repaymentAmount transferred
AugmintToken -> AugmintToken : balances[loanManager] -= repaymentAmount\nbalances[AugmintToken] += repaymentAmount\nburn(repaymentAmount)\nbalances[interestPool] + = interestAmount\nbalances[interestEarned] += interestAmount
deactivate AugmintToken
LoanManager --> Borrower : borrower.send(ethInEscrow)

== repay loan Alt 2., fallback (two user Txs but direclty via loanManager)  ==
Borrower -> AugmintToken : Tx1: approve(loanContract, repaymentAmount)
Borrower -> LoanManager : Tx2: releaseCollateral(loanId)
note over Borrower, LoanManager
    from here the same as Alt 1.
end note
== collect loan  ==
Anyone -> LoanManager : collectMultiple(loanIds[])
note left
    collectMultiple() is not restricted
    caller will be rewarded with eth
end note
loop as many times as fits to gas provided to tx call
    LoanManager -> LoanManager : collect()
    LoanManager --> AugmintToken : AugmintToken.send({loanValueInEth + defaultingFee})
    LoanManager --> Borrower : AugmintToken.send({collaterInEscrow - loanValueInEth - defaultingFee})
    LoanManager -> AugmintToken : moveCollectedInterest(interestAmount)
    note over AugmintToken #yellow
    moveCollectedInterest() is restricted to trusted loanManagers
    end note
    AugmintToken -> AugmintToken : move interest from interestPool to reserve
end
LoanManager -> AugmintToken : sendReward(msg.sender, sum collectionReward)
note over AugmintToken #yellow
    sendReward() is restricted to LoanManager
    Q: how much a vulnerability risk is it? how to restrict better?
end note
AugmintToken --> Anyone : msg.sender.send({sum collectionReward})
@enduml
