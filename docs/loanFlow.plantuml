@startuml
title **Augmint** - Loan flow
skinparam ArrowColor #blue
skinparam noteBackgroundColor #lightgrey
actor 3rdParty
actor Borrower
control TokenContract
control LoanManager
control LoanContract
== new loan ==
Borrower -> LoanManager : getLoan\n(productId, {ethToEscrow})
LoanManager -> LoanManager : calculate loanAmount from collateral, interest etc
LoanManager -> LoanContract : create\n(tokenContract, borrower, loanParams, {ethValue})
LoanManager -> TokenContract : newLoan\n(borrower, loanAmount, interestAmount)
note over TokenContract
newLoan is restricted to trusted LoanManager(s)
end note
TokenContract -> TokenContract : issue(repaymentAmount)\nbalances[interestPool] += interestAmount
TokenContract -> TokenContract : _transfer\n(borrower, loanAmount, "loan disbursment", 0)
TokenContract --> Borrower : loanAmount transferred

== repay loan  ==
Borrower -> TokenContract : repay(loanId)
TokenContract -> LoanManager : repay(borrower, loanId)
note over LoanManager
repay only allowed from tokenContract
end note
LoanManager -> LoanContract : repay()
note over LoanManager
repay only allowed from loanManager
end note
note over LoanContract
repay only allowed from loanManager
which created the loan
end note
LoanContract -> LoanContract : selfdestruct()
LoanContract --> Borrower : borrower.send(ethInEscrow)
LoanManager -> LoanManager : close loan
LoanManager --> TokenContract : return loanAmount, interestAmount
activate TokenContract
TokenContract -> TokenContract : _transfer\n(tokenContract, repaymentAmount, "loan repayment", 0)
Borrower --> TokenContract : repaymentAmount transferred
TokenContract -> TokenContract : burn(repaymentAmount)\nbalances[interestPool] + = interestAmount\nbalances[interestEarned] += interestAmount
deactivate TokenContract
== collect loan  ==
3rdParty -> LoanManager : collectMultiple(loanIds[])
note right
    anyone call collectMultiple and collect
    caller can be rewarded with some eth
end note
loop as many times as fits to gas provided to tx call
    LoanManager -> LoanContract : collect()
    note over LoanContract
        collect only if defaulted
    end note
    LoanContract --> TokenContract : tokenContract.send({collaterInEscrow})
    LoanContract -> LoanContract : selfdestruct
    LoanManager -> TokenContract : moveCollectedInterest(interestAmount)
    note over TokenContract
    collected only allowed with trusted loanManagers
    end note
    TokenContract -> TokenContract : move interest from interestPool to reserve
end
@enduml
